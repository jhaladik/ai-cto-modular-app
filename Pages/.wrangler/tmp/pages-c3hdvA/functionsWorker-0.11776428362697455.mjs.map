{
  "version": 3,
  "sources": ["../../../functions/api/auth/login.js", "../../../functions/api/auth/logout.js", "../../../functions/api/auth/validate.js", "../../../functions/api/kam/%5Bpath%5D.js", "../../../functions/_shared/auth-helper.js", "../../../functions/api/key-account-manager.js", "functionsRoutes-0.46100317410434766.mjs", "../../../node_modules/path-to-regexp/src/index.ts", "../../../node_modules/wrangler/templates/pages-template-worker.ts", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-HfVDIS/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-HfVDIS/middleware-loader.entry.ts"],
  "sourceRoot": "C:\\Users\\jhala\\OneDrive\\APPS\\ai-cto-modular-app\\Pages\\.wrangler\\tmp\\pages-c3hdvA\\functionsWorker-0.11776428362697455.mjs",
  "sourcesContent": ["// functions/api/auth/login.js\r\n// @WORKER: AuthenticationProxy + KAM Integration\r\n// \uD83E\uDDF1 Type: PagesFunction  \r\n// \uD83D\uDCCD Path: functions/api/auth/login.js\r\n// \uD83C\uDFAF Role: Enhanced session management for AI Factory + KAM frontend\r\n// \uD83D\uDCBE Storage: { kv: \"BITWARE_SESSION_STORE\", d1: \"KAM via service binding\" }\r\n\r\nexport async function onRequestPost(context) {\r\n  const { request, env } = context;\r\n  \r\n  try {\r\n    const { username, password, loginType = 'admin' } = await request.json();\r\n    \r\n    let sessionData = null;\r\n    let clientData = null;\r\n    \r\n    // Handle different login types\r\n    switch (loginType) {\r\n      case 'admin':\r\n      case 'user':\r\n        // Admin/User authentication via unified KAM database\r\n        try {\r\n          const kamResponse = await env.KEY_ACCOUNT_MANAGER.fetch(\r\n            new Request('https://kam.internal/auth/validate-user', {\r\n              method: 'POST',\r\n              headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${env.WORKER_SHARED_SECRET}`,\r\n                'X-Worker-ID': 'pages-auth-proxy'\r\n              },\r\n              body: JSON.stringify({\r\n                email: username, // For all users, username is email\r\n                password: password,\r\n                expected_role: loginType // 'admin' or 'user'\r\n              })\r\n            })\r\n          );\r\n          \r\n          if (!kamResponse.ok) {\r\n            const error = await kamResponse.json();\r\n            return new Response(JSON.stringify({ \r\n              success: false, \r\n              error: error.error || 'Authentication failed' \r\n            }), {\r\n              status: 401,\r\n              headers: { 'Content-Type': 'application/json' }\r\n            });\r\n          }\r\n          \r\n          const userData = await kamResponse.json();\r\n          \r\n          sessionData = {\r\n            username: userData.user.email,\r\n            role: userData.user.role,\r\n            userType: 'internal',\r\n            userId: userData.user.user_id,\r\n            fullName: userData.user.full_name,\r\n            department: userData.user.department || 'General', // \u2705 FIXED: Direct access + fallback\r\n            created: Date.now(),\r\n            expires: Date.now() + (24 * 60 * 60 * 1000) // 24 hours\r\n          };\r\n        } catch (error) {\r\n          console.error('Authentication service error:', error);\r\n          return new Response(JSON.stringify({ \r\n            success: false, \r\n            error: 'Authentication service unavailable' \r\n          }), {\r\n            status: 503,\r\n            headers: { 'Content-Type': 'application/json' }\r\n          });\r\n        }\r\n        break;\r\n        \r\n      case 'client':\r\n        // All user authentication via unified KAM database\r\n        try {\r\n          const kamResponse = await env.KEY_ACCOUNT_MANAGER.fetch(\r\n            new Request('https://kam.internal/auth/validate-user', {\r\n              method: 'POST',\r\n              headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${env.WORKER_SHARED_SECRET}`,\r\n                'X-Worker-ID': 'pages-auth-proxy'\r\n              },\r\n              body: JSON.stringify({\r\n                email: username, // For all users, username is email\r\n                password: password,\r\n                expected_role: 'client'\r\n              })\r\n            })\r\n          );\r\n          \r\n          if (!kamResponse.ok) {\r\n            const error = await kamResponse.json();\r\n            return new Response(JSON.stringify({ \r\n              success: false, \r\n              error: error.error || 'Authentication failed' \r\n            }), {\r\n              status: 401,\r\n              headers: { 'Content-Type': 'application/json' }\r\n            });\r\n          }\r\n          \r\n          const userData = await kamResponse.json();\r\n          \r\n          sessionData = {\r\n            username: userData.user.email,\r\n            role: userData.user.role,\r\n            userType: 'client',\r\n            userId: userData.user.user_id,\r\n            clientId: userData.client_profile?.client_id,\r\n            companyName: userData.client_profile?.company_name,\r\n            subscriptionTier: userData.client_profile?.subscription_tier,\r\n            fullName: userData.user.full_name,\r\n            created: Date.now(),\r\n            expires: Date.now() + (24 * 60 * 60 * 1000) // 24 hours\r\n          };\r\n        } catch (error) {\r\n          console.error('Authentication service error:', error);\r\n          return new Response(JSON.stringify({ \r\n            success: false, \r\n            error: 'Authentication service unavailable' \r\n          }), {\r\n            status: 503,\r\n            headers: { 'Content-Type': 'application/json' }\r\n          });\r\n        }\r\n        break;\r\n        \r\n      default:\r\n        return new Response(JSON.stringify({ \r\n          success: false, \r\n          error: 'Invalid login type' \r\n        }), {\r\n          status: 400,\r\n          headers: { 'Content-Type': 'application/json' }\r\n        });\r\n    }\r\n    \r\n    // Generate session token\r\n    const sessionToken = crypto.randomUUID();\r\n    \r\n    // Store session in KV\r\n    await env.BITWARE_SESSION_STORE.put(\r\n      `session:${sessionToken}`, \r\n      JSON.stringify(sessionData), \r\n      {\r\n        expirationTtl: 24 * 60 * 60 // 24 hours in seconds\r\n      }\r\n    );\r\n    \r\n    // For all sessions, register with KAM for unified session management\r\n    try {\r\n      await env.KEY_ACCOUNT_MANAGER.fetch(\r\n        new Request('https://kam.internal/session/register', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${env.WORKER_SHARED_SECRET}`,\r\n            'X-Worker-ID': 'pages-auth-proxy'\r\n          },\r\n          body: JSON.stringify({\r\n            sessionToken,\r\n            userId: sessionData.userId,\r\n            clientId: sessionData.clientId || null,\r\n            loginMethod: 'dashboard',\r\n            expiresAt: new Date(sessionData.expires).toISOString()\r\n          })\r\n        })\r\n      );\r\n    } catch (error) {\r\n      console.error('Session registration failed:', error);\r\n      // Continue anyway - session is valid in KV\r\n    }\r\n    \r\n    return new Response(JSON.stringify({\r\n      success: true,\r\n      sessionToken,\r\n      user: {\r\n        username: sessionData.username,\r\n        role: sessionData.role,\r\n        userType: sessionData.userType,\r\n        userId: sessionData.userId,\r\n        fullName: sessionData.fullName,\r\n        ...(sessionData.role === 'client' ? {\r\n          clientId: sessionData.clientId,\r\n          companyName: sessionData.companyName,\r\n          subscriptionTier: sessionData.subscriptionTier\r\n        } : {}),\r\n        ...(sessionData.userType === 'internal' ? {\r\n          department: sessionData.department\r\n        } : {})\r\n      }\r\n    }), {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Login error:', error);\r\n    return new Response(JSON.stringify({ \r\n      success: false, \r\n      error: 'Invalid request' \r\n    }), {\r\n      status: 400,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n}", "// functions/api/auth/logout.js\r\nexport async function onRequestPost(context) {\r\n    const { request, env } = context;\r\n    \r\n    try {\r\n      const sessionToken = request.headers.get('x-bitware-session-token');\r\n      \r\n      if (sessionToken) {\r\n        // Remove session from KV\r\n        await env.BITWARE_SESSION_STORE.delete(`session:${sessionToken}`);\r\n      }\r\n      \r\n      return new Response(JSON.stringify({ success: true }), {\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n      \r\n    } catch (error) {\r\n      return new Response(JSON.stringify({ \r\n        success: false, \r\n        error: 'Logout failed' \r\n      }), {\r\n        status: 500,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n  }", "// functions/api/auth/validate.js\r\nexport async function onRequestPost(context) {\r\n  const { request, env } = context;\r\n  \r\n  try {\r\n    // Get session token (handle both header formats)\r\n    const sessionToken = request.headers.get('x-bitware-session-token') || \r\n                         request.headers.get('X-Session-Token');\r\n    \r\n    if (!sessionToken) {\r\n      return new Response(JSON.stringify({ \r\n        valid: false, \r\n        error: 'No session token provided' \r\n      }), {\r\n        status: 401,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    // Validate session in KV\r\n    const sessionKey = `session:${sessionToken}`;\r\n    const sessionData = await env.BITWARE_SESSION_STORE.get(sessionKey);\r\n    \r\n    if (!sessionData) {\r\n      return new Response(JSON.stringify({ \r\n        valid: false, \r\n        error: 'Invalid or expired session' \r\n      }), {\r\n        status: 401,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    const session = JSON.parse(sessionData);\r\n    \r\n    // Check expiration\r\n    if (Date.now() > session.expires) {\r\n      await env.BITWARE_SESSION_STORE.delete(sessionKey);\r\n      return new Response(JSON.stringify({ \r\n        valid: false, \r\n        error: 'Session expired' \r\n      }), {\r\n        status: 401,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    // Return valid session with user data\r\n    return new Response(JSON.stringify({\r\n      valid: true,\r\n      user: {\r\n        email: session.username,\r\n        role: session.role,\r\n        full_name: session.fullName || session.username, // Fix the missing full_name\r\n        userId: session.userId,\r\n        userType: session.userType\r\n      }\r\n    }), {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Session validation error:', error);\r\n    return new Response(JSON.stringify({ \r\n      valid: false, \r\n      error: 'Validation failed' \r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n}\r\n\r\n// Also handle GET requests\r\nexport async function onRequestGet(context) {\r\n  return onRequestPost(context);\r\n}", "// functions/api/kam/[...path].js - DEBUG VERSION\r\n// Minimal version to identify the exact issue\r\n\r\nexport async function onRequest(context) {\r\n    // CORS headers first\r\n    const corsHeaders = {\r\n        'Access-Control-Allow-Origin': '*',\r\n        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\r\n        'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-API-Key, X-Worker-ID, x-bitware-session-token',\r\n    };\r\n    \r\n    // Handle CORS preflight\r\n    if (context.request.method === 'OPTIONS') {\r\n        return new Response(null, { headers: corsHeaders });\r\n    }\r\n    \r\n    try {\r\n        // Debug: Log what we received\r\n        const debug = {\r\n            method: context.request.method,\r\n            url: context.request.url,\r\n            params: context.params,\r\n            hasEnv: !!context.env,\r\n            hasSessionStore: !!context.env?.BITWARE_SESSION_STORE,\r\n            timestamp: new Date().toISOString()\r\n        };\r\n        \r\n        console.log('\uD83D\uDD0D KAM Proxy Debug:', JSON.stringify(debug));\r\n        \r\n        // Get path safely\r\n        let path = '';\r\n        if (context.params && context.params.path && Array.isArray(context.params.path)) {\r\n            path = context.params.path.join('/');\r\n        }\r\n        \r\n        console.log('\uD83D\uDCCD Extracted path:', path);\r\n        \r\n        // Handle health check specifically\r\n        if (path === 'health' || path === '' || !path) {\r\n            console.log('\uD83D\uDC9A Handling health check');\r\n            \r\n            const healthResponse = {\r\n                status: 'proxy_healthy',\r\n                debug: debug,\r\n                path: path,\r\n                message: 'KAM proxy is responding'\r\n            };\r\n            \r\n            return new Response(JSON.stringify(healthResponse), {\r\n                status: 200,\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    ...corsHeaders\r\n                }\r\n            });\r\n        }\r\n        \r\n        // For any other path, try to call the KAM worker\r\n        console.log('\uD83D\uDD04 Attempting to call KAM worker for path:', path);\r\n        \r\n        try {\r\n            const kamWorkerUrl = `https://bitware-key-account-manager.jhaladik.workers.dev/${path}`;\r\n            console.log('\uD83D\uDCDE Calling:', kamWorkerUrl);\r\n            \r\n            const kamResponse = await fetch(kamWorkerUrl, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n            \r\n            console.log('\uD83D\uDCCB KAM worker response status:', kamResponse.status);\r\n            \r\n            const responseText = await kamResponse.text();\r\n            \r\n            return new Response(responseText, {\r\n                status: kamResponse.status,\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    ...corsHeaders\r\n                }\r\n            });\r\n            \r\n        } catch (fetchError) {\r\n            console.error('\u274C Fetch to KAM worker failed:', fetchError);\r\n            \r\n            return new Response(JSON.stringify({\r\n                success: false,\r\n                error: 'KAM worker fetch failed',\r\n                details: fetchError.message,\r\n                attempted_url: `https://bitware-key-account-manager.jhaladik.workers.dev/${path}`\r\n            }), {\r\n                status: 503,\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    ...corsHeaders\r\n                }\r\n            });\r\n        }\r\n        \r\n    } catch (error) {\r\n        console.error('\u274C KAM Proxy main error:', error);\r\n        \r\n        // Return detailed error for debugging\r\n        return new Response(JSON.stringify({\r\n            success: false,\r\n            error: 'KAM proxy function error',\r\n            message: error.message,\r\n            stack: error.stack,\r\n            timestamp: new Date().toISOString()\r\n        }), {\r\n            status: 500,\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                ...corsHeaders\r\n            }\r\n        });\r\n    }\r\n}", "// Shared helper function for all proxy functions\r\n// functions/_shared/auth-helper.js\r\nexport async function validateSession(request, env) {\r\n    const sessionToken = request.headers.get('x-bitware-session-token');\r\n    \r\n    if (!sessionToken) {\r\n      return { valid: false, error: 'No session token' };\r\n    }\r\n    \r\n    try {\r\n      const sessionData = await env.BITWARE_SESSION_STORE.get(`session:${sessionToken}`);\r\n      \r\n      if (!sessionData) {\r\n        return { valid: false, error: 'Invalid session' };\r\n      }\r\n      \r\n      const session = JSON.parse(sessionData);\r\n      \r\n      if (Date.now() > session.expires) {\r\n        await env.BITWARE_SESSION_STORE.delete(`session:${sessionToken}`);\r\n        return { valid: false, error: 'Session expired' };\r\n      }\r\n      \r\n      return { valid: true, session };\r\n      \r\n    } catch (error) {\r\n      return { valid: false, error: 'Session validation failed' };\r\n    }\r\n  }\r\n  ", "// Pages/functions/api/key-account-manager.js\r\n// Corrected KAM proxy - integrates Pages sessions with KAM worker properly\r\n\r\nimport { validateSession } from '../_shared/auth-helper.js';\r\n\r\n// CORS headers\r\nconst corsHeaders = {\r\n    'Access-Control-Allow-Origin': '*',\r\n    'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\r\n    'Access-Control-Allow-Headers': 'Content-Type, X-Session-Token, x-bitware-session-token, Authorization'\r\n};\r\n\r\n// Handle CORS preflight\r\nexport async function onRequestOptions() {\r\n    return new Response(null, { headers: corsHeaders });\r\n}\r\n\r\n// Main proxy handler\r\nexport async function onRequestPost(context) {\r\n    const { request, env } = context;\r\n    \r\n    try {\r\n        console.log('\uD83D\uDD0D KAM Proxy: Processing request');\r\n        \r\n        // Parse the request body\r\n        const incomingBody = await request.json();\r\n        const { endpoint, method = 'GET', data = {} } = incomingBody;\r\n        \r\n        console.log(`\uD83D\uDCE1 KAM Proxy: ${method} ${endpoint}`);\r\n        \r\n        // Step 1: Validate Pages session\r\n        const sessionToken = request.headers.get('X-Session-Token') || request.headers.get('x-bitware-session-token');\r\n        if (!sessionToken) {\r\n            return new Response(JSON.stringify({\r\n                success: false,\r\n                error: 'No session token provided'\r\n            }), {\r\n                status: 401,\r\n                headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n            });\r\n        }\r\n        \r\n        console.log(`\uD83D\uDD11 Validating Pages session: ${sessionToken.substring(0, 10)}...`);\r\n        \r\n        // Create a request with the correct header format for validateSession\r\n        const sessionRequest = new Request(request.url, {\r\n            method: request.method,\r\n            headers: {\r\n                ...request.headers,\r\n                'x-bitware-session-token': sessionToken\r\n            }\r\n        });\r\n        \r\n        const sessionValidation = await validateSession(sessionRequest, env);\r\n        if (!sessionValidation.valid) {\r\n            console.log('\u274C Pages session invalid:', sessionValidation.error);\r\n            return new Response(JSON.stringify({\r\n                success: false,\r\n                error: sessionValidation.error\r\n            }), {\r\n                status: 401,\r\n                headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n            });\r\n        }\r\n        \r\n        const session = sessionValidation.session;\r\n        console.log(`\u2705 Pages session valid for user: ${session.username} (${session.role})`);\r\n        \r\n        // Step 2: Determine authentication method for KAM worker\r\n        let kamHeaders = {\r\n            'Content-Type': 'application/json'\r\n        };\r\n        \r\n        // Check if this is an admin operation\r\n        const isAdminEndpoint = endpoint.startsWith('/clients') || \r\n                              endpoint.startsWith('/users') || \r\n                              endpoint.startsWith('/dashboard') ||\r\n                              endpoint.includes('admin');\r\n        \r\n        if (isAdminEndpoint) {\r\n            // Admin operations - verify user is admin and use worker auth\r\n            if (session.role !== 'admin' && session.userType !== 'internal') {\r\n                console.log('\uD83D\uDEAB Admin access denied for role:', session.role);\r\n                return new Response(JSON.stringify({\r\n                    success: false,\r\n                    error: 'Admin access required'\r\n                }), {\r\n                    status: 403,\r\n                    headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n                });\r\n            }\r\n            \r\n            // Use worker-to-worker authentication\r\n            kamHeaders['Authorization'] = `Bearer ${env.WORKER_SHARED_SECRET}`;\r\n            kamHeaders['X-Worker-ID'] = 'pages-kam-proxy';\r\n            console.log('\uD83D\uDD27 Using worker authentication for admin endpoint');\r\n            \r\n        } else {\r\n            // Non-admin operations - use client API key\r\n            kamHeaders['X-API-Key'] = env.CLIENT_API_KEY;\r\n            console.log('\uD83D\uDD27 Using client API key for regular endpoint');\r\n        }\r\n        \r\n        // Step 3: Call KAM worker\r\n        console.log('\uD83D\uDCDE Calling KAM worker...');\r\n        \r\n        let kamRequestBody = null;\r\n        if (method !== 'GET' && method !== 'HEAD') {\r\n            kamRequestBody = JSON.stringify(data);\r\n        }\r\n        \r\n        const kamResponse = await env.KEY_ACCOUNT_MANAGER.fetch(\r\n            new Request(`https://kam.internal${endpoint}`, {\r\n                method,\r\n                headers: kamHeaders,\r\n                body: kamRequestBody\r\n            })\r\n        );\r\n        \r\n        console.log(`\uD83D\uDCE8 KAM worker responded: ${kamResponse.status}`);\r\n        \r\n        // Step 4: Return response\r\n        const responseText = await kamResponse.text();\r\n        \r\n        return new Response(responseText, {\r\n            status: kamResponse.status,\r\n            statusText: kamResponse.statusText,\r\n            headers: {\r\n                'Content-Type': kamResponse.headers.get('Content-Type') || 'application/json',\r\n                ...corsHeaders\r\n            }\r\n        });\r\n        \r\n    } catch (error) {\r\n        console.error('\u274C KAM Proxy Error:', error);\r\n        \r\n        return new Response(JSON.stringify({\r\n            success: false,\r\n            error: 'Proxy error',\r\n            message: error.message,\r\n            timestamp: new Date().toISOString()\r\n        }), {\r\n            status: 500,\r\n            headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n        });\r\n    }\r\n}\r\n\r\n// Also handle GET requests for direct endpoint access\r\nexport async function onRequestGet(context) {\r\n    const { request, env } = context;\r\n    \r\n    // Convert GET to POST format for consistency\r\n    const url = new URL(request.url);\r\n    const endpoint = url.pathname.replace('/api/key-account-manager', '');\r\n    \r\n    // Create a fake POST request\r\n    const fakeRequest = new Request(request.url, {\r\n        method: 'POST',\r\n        headers: request.headers,\r\n        body: JSON.stringify({\r\n            endpoint: endpoint || '/health',\r\n            method: 'GET',\r\n            data: {}\r\n        })\r\n    });\r\n    \r\n    return onRequestPost({ request: fakeRequest, env });\r\n}", "import { onRequestPost as __api_auth_login_js_onRequestPost } from \"C:\\\\Users\\\\jhala\\\\OneDrive\\\\APPS\\\\ai-cto-modular-app\\\\Pages\\\\functions\\\\api\\\\auth\\\\login.js\"\nimport { onRequestPost as __api_auth_logout_js_onRequestPost } from \"C:\\\\Users\\\\jhala\\\\OneDrive\\\\APPS\\\\ai-cto-modular-app\\\\Pages\\\\functions\\\\api\\\\auth\\\\logout.js\"\nimport { onRequestGet as __api_auth_validate_js_onRequestGet } from \"C:\\\\Users\\\\jhala\\\\OneDrive\\\\APPS\\\\ai-cto-modular-app\\\\Pages\\\\functions\\\\api\\\\auth\\\\validate.js\"\nimport { onRequestPost as __api_auth_validate_js_onRequestPost } from \"C:\\\\Users\\\\jhala\\\\OneDrive\\\\APPS\\\\ai-cto-modular-app\\\\Pages\\\\functions\\\\api\\\\auth\\\\validate.js\"\nimport { onRequest as __api_kam__path__js_onRequest } from \"C:\\\\Users\\\\jhala\\\\OneDrive\\\\APPS\\\\ai-cto-modular-app\\\\Pages\\\\functions\\\\api\\\\kam\\\\[path].js\"\nimport { onRequestGet as __api_key_account_manager_js_onRequestGet } from \"C:\\\\Users\\\\jhala\\\\OneDrive\\\\APPS\\\\ai-cto-modular-app\\\\Pages\\\\functions\\\\api\\\\key-account-manager.js\"\nimport { onRequestOptions as __api_key_account_manager_js_onRequestOptions } from \"C:\\\\Users\\\\jhala\\\\OneDrive\\\\APPS\\\\ai-cto-modular-app\\\\Pages\\\\functions\\\\api\\\\key-account-manager.js\"\nimport { onRequestPost as __api_key_account_manager_js_onRequestPost } from \"C:\\\\Users\\\\jhala\\\\OneDrive\\\\APPS\\\\ai-cto-modular-app\\\\Pages\\\\functions\\\\api\\\\key-account-manager.js\"\n\nexport const routes = [\n    {\n      routePath: \"/api/auth/login\",\n      mountPath: \"/api/auth\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_auth_login_js_onRequestPost],\n    },\n  {\n      routePath: \"/api/auth/logout\",\n      mountPath: \"/api/auth\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_auth_logout_js_onRequestPost],\n    },\n  {\n      routePath: \"/api/auth/validate\",\n      mountPath: \"/api/auth\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_auth_validate_js_onRequestGet],\n    },\n  {\n      routePath: \"/api/auth/validate\",\n      mountPath: \"/api/auth\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_auth_validate_js_onRequestPost],\n    },\n  {\n      routePath: \"/api/kam/:path\",\n      mountPath: \"/api/kam\",\n      method: \"\",\n      middlewares: [],\n      modules: [__api_kam__path__js_onRequest],\n    },\n  {\n      routePath: \"/api/key-account-manager\",\n      mountPath: \"/api\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_key_account_manager_js_onRequestGet],\n    },\n  {\n      routePath: \"/api/key-account-manager\",\n      mountPath: \"/api\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_key_account_manager_js_onRequestOptions],\n    },\n  {\n      routePath: \"/api/key-account-manager\",\n      mountPath: \"/api\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_key_account_manager_js_onRequestPost],\n    },\n  ]", "/**\n * Tokenizer results.\n */\ninterface LexToken {\n  type:\n    | \"OPEN\"\n    | \"CLOSE\"\n    | \"PATTERN\"\n    | \"NAME\"\n    | \"CHAR\"\n    | \"ESCAPED_CHAR\"\n    | \"MODIFIER\"\n    | \"END\";\n  index: number;\n  value: string;\n}\n\n/**\n * Tokenize input string.\n */\nfunction lexer(str: string): LexToken[] {\n  const tokens: LexToken[] = [];\n  let i = 0;\n\n  while (i < str.length) {\n    const char = str[i];\n\n    if (char === \"*\" || char === \"+\" || char === \"?\") {\n      tokens.push({ type: \"MODIFIER\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"\\\\\") {\n      tokens.push({ type: \"ESCAPED_CHAR\", index: i++, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"{\") {\n      tokens.push({ type: \"OPEN\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"}\") {\n      tokens.push({ type: \"CLOSE\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \":\") {\n      let name = \"\";\n      let j = i + 1;\n\n      while (j < str.length) {\n        const code = str.charCodeAt(j);\n\n        if (\n          // `0-9`\n          (code >= 48 && code <= 57) ||\n          // `A-Z`\n          (code >= 65 && code <= 90) ||\n          // `a-z`\n          (code >= 97 && code <= 122) ||\n          // `_`\n          code === 95\n        ) {\n          name += str[j++];\n          continue;\n        }\n\n        break;\n      }\n\n      if (!name) throw new TypeError(`Missing parameter name at ${i}`);\n\n      tokens.push({ type: \"NAME\", index: i, value: name });\n      i = j;\n      continue;\n    }\n\n    if (char === \"(\") {\n      let count = 1;\n      let pattern = \"\";\n      let j = i + 1;\n\n      if (str[j] === \"?\") {\n        throw new TypeError(`Pattern cannot start with \"?\" at ${j}`);\n      }\n\n      while (j < str.length) {\n        if (str[j] === \"\\\\\") {\n          pattern += str[j++] + str[j++];\n          continue;\n        }\n\n        if (str[j] === \")\") {\n          count--;\n          if (count === 0) {\n            j++;\n            break;\n          }\n        } else if (str[j] === \"(\") {\n          count++;\n          if (str[j + 1] !== \"?\") {\n            throw new TypeError(`Capturing groups are not allowed at ${j}`);\n          }\n        }\n\n        pattern += str[j++];\n      }\n\n      if (count) throw new TypeError(`Unbalanced pattern at ${i}`);\n      if (!pattern) throw new TypeError(`Missing pattern at ${i}`);\n\n      tokens.push({ type: \"PATTERN\", index: i, value: pattern });\n      i = j;\n      continue;\n    }\n\n    tokens.push({ type: \"CHAR\", index: i, value: str[i++] });\n  }\n\n  tokens.push({ type: \"END\", index: i, value: \"\" });\n\n  return tokens;\n}\n\nexport interface ParseOptions {\n  /**\n   * Set the default delimiter for repeat parameters. (default: `'/'`)\n   */\n  delimiter?: string;\n  /**\n   * List of characters to automatically consider prefixes when parsing.\n   */\n  prefixes?: string;\n}\n\n/**\n * Parse a string for the raw tokens.\n */\nexport function parse(str: string, options: ParseOptions = {}): Token[] {\n  const tokens = lexer(str);\n  const { prefixes = \"./\", delimiter = \"/#?\" } = options;\n  const result: Token[] = [];\n  let key = 0;\n  let i = 0;\n  let path = \"\";\n\n  const tryConsume = (type: LexToken[\"type\"]): string | undefined => {\n    if (i < tokens.length && tokens[i].type === type) return tokens[i++].value;\n  };\n\n  const mustConsume = (type: LexToken[\"type\"]): string => {\n    const value = tryConsume(type);\n    if (value !== undefined) return value;\n    const { type: nextType, index } = tokens[i];\n    throw new TypeError(`Unexpected ${nextType} at ${index}, expected ${type}`);\n  };\n\n  const consumeText = (): string => {\n    let result = \"\";\n    let value: string | undefined;\n    while ((value = tryConsume(\"CHAR\") || tryConsume(\"ESCAPED_CHAR\"))) {\n      result += value;\n    }\n    return result;\n  };\n\n  const isSafe = (value: string): boolean => {\n    for (const char of delimiter) if (value.indexOf(char) > -1) return true;\n    return false;\n  };\n\n  const safePattern = (prefix: string) => {\n    const prev = result[result.length - 1];\n    const prevText = prefix || (prev && typeof prev === \"string\" ? prev : \"\");\n\n    if (prev && !prevText) {\n      throw new TypeError(\n        `Must have text between two parameters, missing text after \"${(prev as Key).name}\"`,\n      );\n    }\n\n    if (!prevText || isSafe(prevText)) return `[^${escapeString(delimiter)}]+?`;\n    return `(?:(?!${escapeString(prevText)})[^${escapeString(delimiter)}])+?`;\n  };\n\n  while (i < tokens.length) {\n    const char = tryConsume(\"CHAR\");\n    const name = tryConsume(\"NAME\");\n    const pattern = tryConsume(\"PATTERN\");\n\n    if (name || pattern) {\n      let prefix = char || \"\";\n\n      if (prefixes.indexOf(prefix) === -1) {\n        path += prefix;\n        prefix = \"\";\n      }\n\n      if (path) {\n        result.push(path);\n        path = \"\";\n      }\n\n      result.push({\n        name: name || key++,\n        prefix,\n        suffix: \"\",\n        pattern: pattern || safePattern(prefix),\n        modifier: tryConsume(\"MODIFIER\") || \"\",\n      });\n      continue;\n    }\n\n    const value = char || tryConsume(\"ESCAPED_CHAR\");\n    if (value) {\n      path += value;\n      continue;\n    }\n\n    if (path) {\n      result.push(path);\n      path = \"\";\n    }\n\n    const open = tryConsume(\"OPEN\");\n    if (open) {\n      const prefix = consumeText();\n      const name = tryConsume(\"NAME\") || \"\";\n      const pattern = tryConsume(\"PATTERN\") || \"\";\n      const suffix = consumeText();\n\n      mustConsume(\"CLOSE\");\n\n      result.push({\n        name: name || (pattern ? key++ : \"\"),\n        pattern: name && !pattern ? safePattern(prefix) : pattern,\n        prefix,\n        suffix,\n        modifier: tryConsume(\"MODIFIER\") || \"\",\n      });\n      continue;\n    }\n\n    mustConsume(\"END\");\n  }\n\n  return result;\n}\n\nexport interface TokensToFunctionOptions {\n  /**\n   * When `true` the regexp will be case sensitive. (default: `false`)\n   */\n  sensitive?: boolean;\n  /**\n   * Function for encoding input strings for output.\n   */\n  encode?: (value: string, token: Key) => string;\n  /**\n   * When `false` the function can produce an invalid (unmatched) path. (default: `true`)\n   */\n  validate?: boolean;\n}\n\n/**\n * Compile a string to a template function for the path.\n */\nexport function compile<P extends object = object>(\n  str: string,\n  options?: ParseOptions & TokensToFunctionOptions,\n) {\n  return tokensToFunction<P>(parse(str, options), options);\n}\n\nexport type PathFunction<P extends object = object> = (data?: P) => string;\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nexport function tokensToFunction<P extends object = object>(\n  tokens: Token[],\n  options: TokensToFunctionOptions = {},\n): PathFunction<P> {\n  const reFlags = flags(options);\n  const { encode = (x: string) => x, validate = true } = options;\n\n  // Compile all the tokens into regexps.\n  const matches = tokens.map((token) => {\n    if (typeof token === \"object\") {\n      return new RegExp(`^(?:${token.pattern})$`, reFlags);\n    }\n  });\n\n  return (data: Record<string, any> | null | undefined) => {\n    let path = \"\";\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n\n      if (typeof token === \"string\") {\n        path += token;\n        continue;\n      }\n\n      const value = data ? data[token.name] : undefined;\n      const optional = token.modifier === \"?\" || token.modifier === \"*\";\n      const repeat = token.modifier === \"*\" || token.modifier === \"+\";\n\n      if (Array.isArray(value)) {\n        if (!repeat) {\n          throw new TypeError(\n            `Expected \"${token.name}\" to not repeat, but got an array`,\n          );\n        }\n\n        if (value.length === 0) {\n          if (optional) continue;\n\n          throw new TypeError(`Expected \"${token.name}\" to not be empty`);\n        }\n\n        for (let j = 0; j < value.length; j++) {\n          const segment = encode(value[j], token);\n\n          if (validate && !(matches[i] as RegExp).test(segment)) {\n            throw new TypeError(\n              `Expected all \"${token.name}\" to match \"${token.pattern}\", but got \"${segment}\"`,\n            );\n          }\n\n          path += token.prefix + segment + token.suffix;\n        }\n\n        continue;\n      }\n\n      if (typeof value === \"string\" || typeof value === \"number\") {\n        const segment = encode(String(value), token);\n\n        if (validate && !(matches[i] as RegExp).test(segment)) {\n          throw new TypeError(\n            `Expected \"${token.name}\" to match \"${token.pattern}\", but got \"${segment}\"`,\n          );\n        }\n\n        path += token.prefix + segment + token.suffix;\n        continue;\n      }\n\n      if (optional) continue;\n\n      const typeOfMessage = repeat ? \"an array\" : \"a string\";\n      throw new TypeError(`Expected \"${token.name}\" to be ${typeOfMessage}`);\n    }\n\n    return path;\n  };\n}\n\nexport interface RegexpToFunctionOptions {\n  /**\n   * Function for decoding strings for params.\n   */\n  decode?: (value: string, token: Key) => string;\n}\n\n/**\n * A match result contains data about the path match.\n */\nexport interface MatchResult<P extends object = object> {\n  path: string;\n  index: number;\n  params: P;\n}\n\n/**\n * A match is either `false` (no match) or a match result.\n */\nexport type Match<P extends object = object> = false | MatchResult<P>;\n\n/**\n * The match function takes a string and returns whether it matched the path.\n */\nexport type MatchFunction<P extends object = object> = (\n  path: string,\n) => Match<P>;\n\n/**\n * Create path match function from `path-to-regexp` spec.\n */\nexport function match<P extends object = object>(\n  str: Path,\n  options?: ParseOptions & TokensToRegexpOptions & RegexpToFunctionOptions,\n) {\n  const keys: Key[] = [];\n  const re = pathToRegexp(str, keys, options);\n  return regexpToFunction<P>(re, keys, options);\n}\n\n/**\n * Create a path match function from `path-to-regexp` output.\n */\nexport function regexpToFunction<P extends object = object>(\n  re: RegExp,\n  keys: Key[],\n  options: RegexpToFunctionOptions = {},\n): MatchFunction<P> {\n  const { decode = (x: string) => x } = options;\n\n  return function (pathname: string) {\n    const m = re.exec(pathname);\n    if (!m) return false;\n\n    const { 0: path, index } = m;\n    const params = Object.create(null);\n\n    for (let i = 1; i < m.length; i++) {\n      if (m[i] === undefined) continue;\n\n      const key = keys[i - 1];\n\n      if (key.modifier === \"*\" || key.modifier === \"+\") {\n        params[key.name] = m[i].split(key.prefix + key.suffix).map((value) => {\n          return decode(value, key);\n        });\n      } else {\n        params[key.name] = decode(m[i], key);\n      }\n    }\n\n    return { path, index, params };\n  };\n}\n\n/**\n * Escape a regular expression string.\n */\nfunction escapeString(str: string) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n}\n\n/**\n * Get the flags for a regexp from the options.\n */\nfunction flags(options?: { sensitive?: boolean }) {\n  return options && options.sensitive ? \"\" : \"i\";\n}\n\n/**\n * Metadata about a key.\n */\nexport interface Key {\n  name: string | number;\n  prefix: string;\n  suffix: string;\n  pattern: string;\n  modifier: string;\n}\n\n/**\n * A token is a string (nothing special) or key metadata (capture group).\n */\nexport type Token = string | Key;\n\n/**\n * Pull out keys from a regexp.\n */\nfunction regexpToRegexp(path: RegExp, keys?: Key[]): RegExp {\n  if (!keys) return path;\n\n  const groupsRegex = /\\((?:\\?<(.*?)>)?(?!\\?)/g;\n\n  let index = 0;\n  let execResult = groupsRegex.exec(path.source);\n  while (execResult) {\n    keys.push({\n      // Use parenthesized substring match if available, index otherwise\n      name: execResult[1] || index++,\n      prefix: \"\",\n      suffix: \"\",\n      modifier: \"\",\n      pattern: \"\",\n    });\n    execResult = groupsRegex.exec(path.source);\n  }\n\n  return path;\n}\n\n/**\n * Transform an array into a regexp.\n */\nfunction arrayToRegexp(\n  paths: Array<string | RegExp>,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions,\n): RegExp {\n  const parts = paths.map((path) => pathToRegexp(path, keys, options).source);\n  return new RegExp(`(?:${parts.join(\"|\")})`, flags(options));\n}\n\n/**\n * Create a path regexp from string input.\n */\nfunction stringToRegexp(\n  path: string,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions,\n) {\n  return tokensToRegexp(parse(path, options), keys, options);\n}\n\nexport interface TokensToRegexpOptions {\n  /**\n   * When `true` the regexp will be case sensitive. (default: `false`)\n   */\n  sensitive?: boolean;\n  /**\n   * When `true` the regexp won't allow an optional trailing delimiter to match. (default: `false`)\n   */\n  strict?: boolean;\n  /**\n   * When `true` the regexp will match to the end of the string. (default: `true`)\n   */\n  end?: boolean;\n  /**\n   * When `true` the regexp will match from the beginning of the string. (default: `true`)\n   */\n  start?: boolean;\n  /**\n   * Sets the final character for non-ending optimistic matches. (default: `/`)\n   */\n  delimiter?: string;\n  /**\n   * List of characters that can also be \"end\" characters.\n   */\n  endsWith?: string;\n  /**\n   * Encode path tokens for use in the `RegExp`.\n   */\n  encode?: (value: string) => string;\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n */\nexport function tokensToRegexp(\n  tokens: Token[],\n  keys?: Key[],\n  options: TokensToRegexpOptions = {},\n) {\n  const {\n    strict = false,\n    start = true,\n    end = true,\n    encode = (x: string) => x,\n    delimiter = \"/#?\",\n    endsWith = \"\",\n  } = options;\n  const endsWithRe = `[${escapeString(endsWith)}]|$`;\n  const delimiterRe = `[${escapeString(delimiter)}]`;\n  let route = start ? \"^\" : \"\";\n\n  // Iterate over the tokens and create our regexp string.\n  for (const token of tokens) {\n    if (typeof token === \"string\") {\n      route += escapeString(encode(token));\n    } else {\n      const prefix = escapeString(encode(token.prefix));\n      const suffix = escapeString(encode(token.suffix));\n\n      if (token.pattern) {\n        if (keys) keys.push(token);\n\n        if (prefix || suffix) {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            const mod = token.modifier === \"*\" ? \"?\" : \"\";\n            route += `(?:${prefix}((?:${token.pattern})(?:${suffix}${prefix}(?:${token.pattern}))*)${suffix})${mod}`;\n          } else {\n            route += `(?:${prefix}(${token.pattern})${suffix})${token.modifier}`;\n          }\n        } else {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            throw new TypeError(\n              `Can not repeat \"${token.name}\" without a prefix and suffix`,\n            );\n          }\n\n          route += `(${token.pattern})${token.modifier}`;\n        }\n      } else {\n        route += `(?:${prefix}${suffix})${token.modifier}`;\n      }\n    }\n  }\n\n  if (end) {\n    if (!strict) route += `${delimiterRe}?`;\n\n    route += !options.endsWith ? \"$\" : `(?=${endsWithRe})`;\n  } else {\n    const endToken = tokens[tokens.length - 1];\n    const isEndDelimited =\n      typeof endToken === \"string\"\n        ? delimiterRe.indexOf(endToken[endToken.length - 1]) > -1\n        : endToken === undefined;\n\n    if (!strict) {\n      route += `(?:${delimiterRe}(?=${endsWithRe}))?`;\n    }\n\n    if (!isEndDelimited) {\n      route += `(?=${delimiterRe}|${endsWithRe})`;\n    }\n  }\n\n  return new RegExp(route, flags(options));\n}\n\n/**\n * Supported `path-to-regexp` input types.\n */\nexport type Path = string | RegExp | Array<string | RegExp>;\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n */\nexport function pathToRegexp(\n  path: Path,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions,\n) {\n  if (path instanceof RegExp) return regexpToRegexp(path, keys);\n  if (Array.isArray(path)) return arrayToRegexp(path, keys, options);\n  return stringToRegexp(path, keys, options);\n}\n", "import { match } from \"path-to-regexp\";\n\n//note: this explicitly does not include the * character, as pages requires this\nconst escapeRegex = /[.+?^${}()|[\\]\\\\]/g;\n\ntype HTTPMethod =\n\t| \"HEAD\"\n\t| \"OPTIONS\"\n\t| \"GET\"\n\t| \"POST\"\n\t| \"PUT\"\n\t| \"PATCH\"\n\t| \"DELETE\";\n\n/* TODO: Grab these from @cloudflare/workers-types instead */\ntype Params<P extends string = string> = Record<P, string | string[]>;\n\ntype EventContext<Env, P extends string, Data> = {\n\trequest: Request;\n\tfunctionPath: string;\n\twaitUntil: (promise: Promise<unknown>) => void;\n\tpassThroughOnException: () => void;\n\tnext: (input?: Request | string, init?: RequestInit) => Promise<Response>;\n\tenv: Env & { ASSETS: { fetch: typeof fetch } };\n\tparams: Params<P>;\n\tdata: Data;\n};\n\ndeclare type PagesFunction<\n\tEnv = unknown,\n\tP extends string = string,\n\tData extends Record<string, unknown> = Record<string, unknown>,\n> = (context: EventContext<Env, P, Data>) => Response | Promise<Response>;\n/* end @cloudflare/workers-types */\n\ntype RouteHandler = {\n\troutePath: string;\n\tmountPath: string;\n\tmethod?: HTTPMethod;\n\tmodules: PagesFunction[];\n\tmiddlewares: PagesFunction[];\n};\n\n// inject `routes` via ESBuild\ndeclare const routes: RouteHandler[];\n// define `__FALLBACK_SERVICE__` via ESBuild\ndeclare const __FALLBACK_SERVICE__: string;\n\n// expect an ASSETS fetcher binding pointing to the asset-server stage\ntype FetchEnv = {\n\t[name: string]: { fetch: typeof fetch };\n\tASSETS: { fetch: typeof fetch };\n};\n\ntype WorkerContext = {\n\twaitUntil: (promise: Promise<unknown>) => void;\n\tpassThroughOnException: () => void;\n};\n\nfunction* executeRequest(request: Request) {\n\tconst requestPath = new URL(request.url).pathname;\n\n\t// First, iterate through the routes (backwards) and execute \"middlewares\" on partial route matches\n\tfor (const route of [...routes].reverse()) {\n\t\tif (route.method && route.method !== request.method) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// replaces with \"\\\\$&\", this prepends a backslash to the matched string, e.g. \"[\" becomes \"\\[\"\n\t\tconst routeMatcher = match(route.routePath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: false,\n\t\t});\n\t\tconst mountMatcher = match(route.mountPath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: false,\n\t\t});\n\t\tconst matchResult = routeMatcher(requestPath);\n\t\tconst mountMatchResult = mountMatcher(requestPath);\n\t\tif (matchResult && mountMatchResult) {\n\t\t\tfor (const handler of route.middlewares.flat()) {\n\t\t\t\tyield {\n\t\t\t\t\thandler,\n\t\t\t\t\tparams: matchResult.params as Params,\n\t\t\t\t\tpath: mountMatchResult.path,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\t// Then look for the first exact route match and execute its \"modules\"\n\tfor (const route of routes) {\n\t\tif (route.method && route.method !== request.method) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst routeMatcher = match(route.routePath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: true,\n\t\t});\n\t\tconst mountMatcher = match(route.mountPath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: false,\n\t\t});\n\t\tconst matchResult = routeMatcher(requestPath);\n\t\tconst mountMatchResult = mountMatcher(requestPath);\n\t\tif (matchResult && mountMatchResult && route.modules.length) {\n\t\t\tfor (const handler of route.modules.flat()) {\n\t\t\t\tyield {\n\t\t\t\t\thandler,\n\t\t\t\t\tparams: matchResult.params as Params,\n\t\t\t\t\tpath: matchResult.path,\n\t\t\t\t};\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nexport default {\n\tasync fetch(\n\t\toriginalRequest: Request,\n\t\tenv: FetchEnv,\n\t\tworkerContext: WorkerContext\n\t) {\n\t\tlet request = originalRequest;\n\t\tconst handlerIterator = executeRequest(request);\n\t\tlet data = {}; // arbitrary data the user can set between functions\n\t\tlet isFailOpen = false;\n\n\t\tconst next = async (input?: RequestInfo, init?: RequestInit) => {\n\t\t\tif (input !== undefined) {\n\t\t\t\tlet url = input;\n\t\t\t\tif (typeof input === \"string\") {\n\t\t\t\t\turl = new URL(input, request.url).toString();\n\t\t\t\t}\n\t\t\t\trequest = new Request(url, init);\n\t\t\t}\n\n\t\t\tconst result = handlerIterator.next();\n\t\t\t// Note we can't use `!result.done` because this doesn't narrow to the correct type\n\t\t\tif (result.done === false) {\n\t\t\t\tconst { handler, params, path } = result.value;\n\t\t\t\tconst context = {\n\t\t\t\t\trequest: new Request(request.clone()),\n\t\t\t\t\tfunctionPath: path,\n\t\t\t\t\tnext,\n\t\t\t\t\tparams,\n\t\t\t\t\tget data() {\n\t\t\t\t\t\treturn data;\n\t\t\t\t\t},\n\t\t\t\t\tset data(value) {\n\t\t\t\t\t\tif (typeof value !== \"object\" || value === null) {\n\t\t\t\t\t\t\tthrow new Error(\"context.data must be an object\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// user has overriden context.data, so we need to merge it with the existing data\n\t\t\t\t\t\tdata = value;\n\t\t\t\t\t},\n\t\t\t\t\tenv,\n\t\t\t\t\twaitUntil: workerContext.waitUntil.bind(workerContext),\n\t\t\t\t\tpassThroughOnException: () => {\n\t\t\t\t\t\tisFailOpen = true;\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\tconst response = await handler(context);\n\n\t\t\t\tif (!(response instanceof Response)) {\n\t\t\t\t\tthrow new Error(\"Your Pages function should return a Response\");\n\t\t\t\t}\n\n\t\t\t\treturn cloneResponse(response);\n\t\t\t} else if (__FALLBACK_SERVICE__) {\n\t\t\t\t// There are no more handlers so finish with the fallback service (`env.ASSETS.fetch` in Pages' case)\n\t\t\t\tconst response = await env[__FALLBACK_SERVICE__].fetch(request);\n\t\t\t\treturn cloneResponse(response);\n\t\t\t} else {\n\t\t\t\t// There was not fallback service so actually make the request to the origin.\n\t\t\t\tconst response = await fetch(request);\n\t\t\t\treturn cloneResponse(response);\n\t\t\t}\n\t\t};\n\n\t\ttry {\n\t\t\treturn await next();\n\t\t} catch (error) {\n\t\t\tif (isFailOpen) {\n\t\t\t\tconst response = await env[__FALLBACK_SERVICE__].fetch(request);\n\t\t\t\treturn cloneResponse(response);\n\t\t\t}\n\n\t\t\tthrow error;\n\t\t}\n\t},\n};\n\n// This makes a Response mutable\nconst cloneResponse = (response: Response) =>\n\t// https://fetch.spec.whatwg.org/#null-body-status\n\tnew Response(\n\t\t[101, 204, 205, 304].includes(response.status) ? null : response.body,\n\t\tresponse\n\t);\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"C:\\\\Users\\\\jhala\\\\OneDrive\\\\APPS\\\\ai-cto-modular-app\\\\Pages\\\\node_modules\\\\wrangler\\\\templates\\\\pages-template-worker.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"C:\\\\Users\\\\jhala\\\\OneDrive\\\\APPS\\\\ai-cto-modular-app\\\\Pages\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"C:\\\\Users\\\\jhala\\\\OneDrive\\\\APPS\\\\ai-cto-modular-app\\\\Pages\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"C:\\\\Users\\\\jhala\\\\OneDrive\\\\APPS\\\\ai-cto-modular-app\\\\Pages\\\\node_modules\\\\wrangler\\\\templates\\\\pages-template-worker.ts\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"C:\\\\Users\\\\jhala\\\\OneDrive\\\\APPS\\\\ai-cto-modular-app\\\\Pages\\\\.wrangler\\\\tmp\\\\bundle-HfVDIS\\\\middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"C:\\\\Users\\\\jhala\\\\OneDrive\\\\APPS\\\\ai-cto-modular-app\\\\Pages\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\common.ts\";\nimport type { WorkerEntrypointConstructor } from \"C:\\\\Users\\\\jhala\\\\OneDrive\\\\APPS\\\\ai-cto-modular-app\\\\Pages\\\\.wrangler\\\\tmp\\\\bundle-HfVDIS\\\\middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"C:\\\\Users\\\\jhala\\\\OneDrive\\\\APPS\\\\ai-cto-modular-app\\\\Pages\\\\.wrangler\\\\tmp\\\\bundle-HfVDIS\\\\middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": ["onRequestPost", "onRequestPost", "corsHeaders", "onRequestPost", "onRequestGet", "onRequestPost", "onRequestGet", "value", "_a", "result", "char", "prefix", "i"]
}
